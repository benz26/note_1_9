而在 Redis 的默认配置文件中，存在着参数 maxmemory-samples，它的默认值为 3，假设采取了 volatile-ttl 算法，让我们去了解这样的一个回收的过程，假设当前有 5 个即将超时的键值对，如表 2 所示。

表 2 volatile-ttl 样本删除方式
键值对	剩余超时秒数	备注
A1	6	属于探测样本
A2	3	属于探测样本中的最短值，因此最先删除
A3	4	属于探测样本
A4	1	最短值，但是它不属于探测样本，所以没有最先删除
A5	9	但不属于样本由于配置 maxmemory-samples 的值为 3，如果 Redis 是按表中的顺序探测，那么它只会取到样本 A1、A2、A3，然后进行比较，因为 A2 过期剩余秒数最少，所以决定淘汰 A2，因此 A2 是最先被删除的。

注意，此时即将过期且剩余超时秒数最短的 A4 却还在内存中，因为它不属于探测样本。这就是 Redis 中采用的近似算法。当设置 maxmemory-samples 越大，则 Redis 删除的就越精确，但是与此同时带来不利的是，Redis 也就需要花更多的时间去计算和匹配更为精确的值。