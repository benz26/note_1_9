sorted set

每一个元素除了值之外，它还会多一个分数,分数是一个浮点数

这里和无序集合一样，对于每一个元素都是唯一的，
但是对于不同元素而言，它的分数可以一样。

-----------

【语法】
1、添加元素（key不存在则创建key）
zadd key score1 value1 score2 value2...，返回成功添加个数，

2、获取成员个数
zcard key

3、根据分数返回对应的成员（个数），min到max之间的，包含min和max
zcount key min max

4、给member成员加分
zincrby key incrememt member
incrememt可以为负数，
当key不存在时，等于zadd key increment member

5、求指定个数(numkeys)个有序集合的交集，并保存结果到deskey
zinterstore desKey numkeys key1 key2 key3

6、求有序集合key 值在min和值max 之间的元素个数
zlexcount key min max
ZLEXCOUNT myzset - +  //全部元素个数

7、按分值大小返回成员
加入start 和stop可以截取一段返回,start stop是下标
（包含start\stop,下标范围0～len-1）
如果输入withscores则连同分数一起返回
zrange key start stop withscores    从小到大返回       (0到-1代表全部,-2代表倒数第二个)
zrevrange key start stop withscores 从大到小返回

8、元素排名第几，获取其下标
zrank key member         从小到大，取排名第几，返回1就是排名2，返回0就是排名第一
zrevrank key member      从大到小

9、从小到大排序，min为最小值，max为最大值；      
limit可选项，生成下标0-n，根据偏移量offset和限定返回数count返回对应的成员
zrangebylex key min max limit offset count
ZRANGEBYLEX myzset - [c          ，值从‘-’到值为c（包括c）的元素,-不存在，则从第一个

10、按分数查范围成员
zrangebyscore key min max [withscores] [limit offset count] 从小到大
Zrevrangebyscore 从大到小

11、按 分数 区间删除
zremrangebyscore key start stop

12、按分数排行小到大的 排序，删除下标start到stop(包含start stop)的元素
zremrangebyrank key start stop

13、按照值的分布进行删除，删除值为min到max之间的所有成员（[min [max表示包含）
zremrangebylex key min max	

14、返回成员的分数
zscore key member

15、求并集
zunionstore destKey num Kyes key1 key2 key3 key4...  WEIGHTS 2 3 （按照权重，乘以倍数相加）

------
【例子】：
zadd zset1 1 x1 2 x2 3 x3 4 x4 5 x5 6 x6 7 x7 8 x8 9 x9 ，返回9，（插入9个元素）

zadd zset2 1 y1 2 x2 3 y3 4 xy 5 y5 6 x6 7 y7 8 x8 9 y9，返回9(插入9各元素)

zcard zset1 返回9

zcount zset1 1 4，返回4个

zinterstore des_key 2 zset1 zset2，交集存如des_key,返回交集元素个数3(x2 x6 x8)

zlexcount zset1 （x1 [x5 返回4  //2 3 4 5

zrange zset 1 1 5 withscores 
//x2
2
x3
3
x4
5
x5
5
x6
6

zrank zset x5  //返回下标4

zrangebylex zset (x1 [x6
x2
x3
x4
x5
x6

zrangebyscore zset1 5 7
x5
x6
x7

ZSCAN key cursor  MATCH pattern COUNT count
cusor游标
count默认10，返回10个元素
ZSCAN site 0 match "R*"  //从第一个，找匹配R×
“0” //找到的第一个
1) "Runoob"
2.0







































