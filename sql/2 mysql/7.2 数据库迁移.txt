1、相同版本的迁移

假设从一个名为 hostname1 的机器中备份出所有数据库，然后将这些数据库迁移到名为 hostname2 的机器上，具体语法形式如下：
mysqldump -h hostname1 -u root -password=password1 -all-databases
|
mysql -h hostname2 -u root -password=password2

其中：
符号“|”用来实现将命令 mysqldump 备份的文件送给 mysql 命令；
password1 为 hostname1 主机上 root 用户的密码；
password2 为 hostname2 主机上 root 用户的密码；
-all-databases 表示迁移全部的数据库，可省略。

===================================================

1、备份一个数据库（备份的是sql语句）

mysqldump -u username -p dbname [tbname ...]> filename.sql
对上述语法参数说明如下：
username：表示用户名称；
dbname：表示需要备份的数据库名称；
tbname：表示数据库中需要备份的数据表，可以指定多个数据表。省略该参数时，会备份整个数据库；
右箭头“>”：用来告诉 mysqldump 将备份数据表的定义和数据写入备份文件；
filename.sql：表示备份文件的名称，文件名前面可以加绝对路径。通常将数据库备份成一个后缀名为.sql的文件。

2、备份多个数据库
mysqldump -u username -P --databases dbname1 dbname2 ... > filename.sql

3、备份所有数据库
mysqldump -u username -P --all-databases>filename.sql

如果使用--all-databases参数备份了所有的数据库，那么恢复时不需要指定数据库。因为，其对应的 sql 文件中含有 CREATE DATABASE 语句

---------------
1、恢复数据库
mysql -u username -P [dbname] < filename.sql
其中：
username 表示用户名称；
dbname 表示数据库名称，该参数是可选参数。如果 filename.sql 文件为 mysqldump 命令创建的包含创建数据库语句的文件，则执行时不需要指定数据库名。如果指定的数据库名不存在将会报错；
filename.sql 表示备份文件的名称。

=====================================================

SELECTI...INTO OUTFILE导出表数据 //导出纯数据

SELECT 列名 FROM table [WHERE 语句] INTO OUTFILE '目标文件'[OPTIONS]

[OPTIONS] 为可选参数选项，OPTIONS 部分的语法包括 FIELDS 和 LINES 子句，其常用的取值有：
FIELDS TERMINATED BY '字符串'：设置字符串为字段之间的分隔符，可以为单个或多个字符，默认情况下为制表符‘\t’。
FIELDS [OPTIONALLY] ENCLOSED BY '字符'：设置字符来括上 CHAR、VARCHAR 和 TEXT 等字符型字段。如果使用了 OPTIONALLY 则只能用来括上 CHAR 和 VARCHAR 等字符型字段。
FIELDS ESCAPED BY '字符'：设置如何写入或读取特殊字符，只能为单个字符，即设置转义字符，默认值为‘\’。
LINES STARTING BY '字符串'：设置每行开头的字符，可以为单个或多个字符，默认情况下不使用任何字符。
LINES TERMINATED BY '字符串'：设置每行结尾的字符，可以为单个或多个字符，默认值为‘\n’ 。

mysql> SELECT * FROM test.person INTO OUTFILE 'C://ProgramData/MySQL/MySQL Server 5.7/Uploads/person.txt';

然后根据导出的路径找到 person.txt 文件，文件内容如下：//纯数据
1    Java 12
2    MySQL     13
3    C      15
4    C++  22
5    Python     18

----

示例 2
使用 SELECT...INTO OUTFILE 语句将 test 数据库中的 person 表中的记录导出到文本文件，使用 FIELDS 选项和 LINES 选项，要求字段之间用、隔开，字符型数据用双引号括起来。每条记录以-开头。SQL 语句如下：
SELECT * FROM test.person INTO OUTFILE 'C:/person.txt'
    FIELDS TERMINATED BY '\、' OPTIONALLY ENCLOSED BY '\"' LINES STARTING BY '\-'
TERMINATED BY '\r\n';
其中：
FIELDS TERMINATED BY '、’：表示字段之间用、分隔；
ENCLOSED BY '\"'：表示每个字段都用双引号括起来；
LINES STARTING BY '\-'：表示每行以-开头；
TERMINATED BY '\r\n' 表示每行以回车换行符结尾，保证每一条记录占一行。

person.txt 文件内容如下：
-1、"Java"、12
-2、"MySQL"、13
-3、"C"、15
-4、"C++"、22
-5、"Python"、18
------------------

相应的加载数据库，
【实例】将之前导出的数据备份文件 file.txt 导入数据库 test_db 的表 tb_students_copy 中，其中 tb_students_copy 的表结构和 tb_students_info 相同。


mysql> CREATE TABLE tb_students_copy    //首先创建表 tb_students_copy，输入的 SQL 语句和执行结果如下所示。
    -> LIKE tb_students_info;

mysql> SELECT * FROM tb_students_copy;

导入数据与查询表 tb_students_copy 的过程如下所示。

mysql> LOAD DATA INFILE 'C:/ProgramData/MySQL/MySQL Server 5.7/
Uploads/file.txt'
    -> INTO TABLE test_db.tb_students_copy
    -> FIELDS TERMINATED BY ','
    -> OPTIONALLY ENCLOSED BY '"'
    -> LINES TERMINATED BY '?';

mysql> SELECT * FROM test_db.tb_students_copy;
=====================================